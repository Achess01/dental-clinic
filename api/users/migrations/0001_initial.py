# Generated by Django 4.1 on 2022-08-16 04:14

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='modified at')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Must be a valid rut', max_length=13, unique=True, validators=[django.core.validators.RegexValidator(message='Rut must be atleast 9 characters and up to 13 characters. Only letters and digits allowed', regex='[a-zA-Z0-9]{9,13}$')])),
                ('phone_number', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message='Phone number must be entered in the format: +99999999. Up to 15 digits allowed.', regex='\\+?1?\\d{9,15}$')])),
                ('first_name', models.CharField(max_length=150, verbose_name='first name')),
                ('second_name', models.CharField(blank=True, max_length=150, verbose_name='second name')),
                ('last_name', models.CharField(max_length=150, verbose_name='last name')),
                ('last_mother_name', models.CharField(blank=True, max_length=150, verbose_name='last mother name')),
                ('is_admin', models.BooleanField(default=False, verbose_name='admin status')),
                ('is_secretary', models.BooleanField(default=False, verbose_name='secretary status')),
                ('is_specialist', models.BooleanField(default=False, verbose_name='specialist status')),
                ('is_assistant', models.BooleanField(default=False, verbose_name='assistant status')),
                ('is_new_user', models.BooleanField(default=True, help_text='New users has to change default password', verbose_name='new user status')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['-created', '-modified'],
                'get_latest_by': 'created',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Specialist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='modified at')),
                ('speciality', models.CharField(max_length=150, verbose_name='speciality for Specialist user')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='specialist_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created', '-modified'],
                'get_latest_by': 'created',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Secretary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='modified at')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='secretary_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created', '-modified'],
                'get_latest_by': 'created',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Assistant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='modified at')),
                ('specialist', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='specialist', to='users.specialist')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='assistant_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created', '-modified'],
                'get_latest_by': 'created',
                'abstract': False,
            },
        ),
    ]
